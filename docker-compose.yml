version: '3.8'

services:
  # Commenting out LocalStack for now to avoid startup issues
  # localstack:
  #   image: localstack/localstack:latest
  #   ports:
  #     - "4566:4566"  # LocalStack edge port
  #   environment:
  #     - SERVICES=s3
  #     - DEBUG=1
  #     - DATA_DIR=/tmp/localstack/data
  #     - DEFAULT_REGION=us-west-2
  #     - AWS_DEFAULT_REGION=us-west-2
  #     - AWS_ACCESS_KEY_ID=test
  #     - AWS_SECRET_ACCESS_KEY=test
  #   volumes:
  #     - ./scripts/localstack:/docker-entrypoint-initaws.d
  #     - type: tmpfs
  #       target: /tmp/localstack
  #   networks:
  #     - mcp-network
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:4566/health"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 3

  mcp-server:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - MCP_CONFIG_FILE=/app/configs/config.local.yaml
      # Note: Harness, SonarQube, Artifactory, and JFrog Xray support has been removed
    volumes:
      - ./configs:/app/configs
    depends_on:
      - postgres
      - redis
      - mockserver
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "/app/scripts/health-check.sh"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - mcp-network

  mockserver:
    build:
      context: .
      dockerfile: Dockerfile.mockserver
    ports:
      - "8081:8081"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:8081/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - mcp-network

  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=mcp
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/db/init.sql:/docker-entrypoint-initdb.d/init.sql
    command: ["postgres"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - mcp-network

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped
    command: ["redis-server", "--requirepass", "", "--protected-mode", "no"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - mcp-network

  prometheus:
    image: prom/prometheus:v2.44.0
    ports:
      - "9090:9090"
    volumes:
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    restart: unless-stopped
    networks:
      - mcp-network

  grafana:
    image: grafana/grafana:10.0.0
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./configs/grafana/provisioning:/etc/grafana/provisioning
      - ./configs/grafana/dashboards:/var/lib/grafana/dashboards
    restart: unless-stopped
    depends_on:
      - prometheus
    networks:
      - mcp-network

volumes:
  postgres-data:
  redis-data:
  prometheus-data:
  grafana-data:

networks:
  mcp-network:
    driver: bridge
    