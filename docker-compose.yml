version: '3.8'

services:
  localstack:
    image: localstack/localstack:latest
    ports:
      - "4566:4566"  # LocalStack edge port
    environment:
      - SERVICES=s3
      - DEBUG=1
      - DATA_DIR=/tmp/localstack/data
      - DEFAULT_REGION=us-west-2
      - AWS_DEFAULT_REGION=us-west-2
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
    volumes:
      - ./scripts/localstack:/docker-entrypoint-initaws.d
      - localstack-data:/tmp/localstack
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4566/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  mcp-server:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - MCP_DATABASE_HOST=postgres
      - MCP_DATABASE_PORT=5432
      - MCP_DATABASE_USERNAME=postgres
      - MCP_DATABASE_PASSWORD=postgres
      - MCP_DATABASE_DATABASE=mcp
      - MCP_CACHE_TYPE=redis
      - MCP_CACHE_ADDRESS=redis:6379
      # S3 Storage configuration
      - MCP_STORAGE_TYPE=s3
      - MCP_STORAGE_S3_REGION=us-west-2
      - MCP_STORAGE_S3_BUCKET=mcp-contexts
      - MCP_STORAGE_S3_ENDPOINT=http://localstack:4566
      - MCP_STORAGE_S3_FORCE_PATH_STYLE=true
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - MCP_STORAGE_CONTEXT_STORAGE_PROVIDER=s3
      - MCP_STORAGE_CONTEXT_STORAGE_S3_PATH_PREFIX=contexts
      # GitHub configuration with mock mode enabled
      - MCP_ENGINE_GITHUB_API_TOKEN=mock-github-token
      - MCP_ENGINE_GITHUB_WEBHOOK_SECRET=mock-github-secret
      - MCP_ENGINE_GITHUB_MOCK_RESPONSES=true
      - MCP_ENGINE_GITHUB_MOCK_URL=http://mockserver:8081/mock-github
      # Harness configuration with mock mode enabled
      - MCP_ENGINE_HARNESS_API_TOKEN=mock-harness-token
      - MCP_ENGINE_HARNESS_ACCOUNT_ID=mock-harness-account
      - MCP_ENGINE_HARNESS_WEBHOOK_SECRET=mock-harness-secret
      - MCP_ENGINE_HARNESS_MOCK_RESPONSES=true
      - MCP_ENGINE_HARNESS_BASE_URL=http://mockserver:8081/mock-harness
      # SonarQube configuration with mock mode enabled
      - MCP_ENGINE_SONARQUBE_BASE_URL=http://mockserver:8081/mock-sonarqube
      - MCP_ENGINE_SONARQUBE_TOKEN=mock-sonarqube-token
      - MCP_ENGINE_SONARQUBE_WEBHOOK_SECRET=mock-sonarqube-secret
      - MCP_ENGINE_SONARQUBE_MOCK_RESPONSES=true
      # Artifactory configuration with mock mode enabled
      - MCP_ENGINE_ARTIFACTORY_BASE_URL=http://mockserver:8081/mock-artifactory
      - MCP_ENGINE_ARTIFACTORY_USERNAME=mock-artifactory-user
      - MCP_ENGINE_ARTIFACTORY_PASSWORD=mock-artifactory-password
      - MCP_ENGINE_ARTIFACTORY_API_KEY=mock-artifactory-api-key
      - MCP_ENGINE_ARTIFACTORY_WEBHOOK_SECRET=mock-artifactory-secret
      - MCP_ENGINE_ARTIFACTORY_MOCK_RESPONSES=true
      # Xray configuration with mock mode enabled
      - MCP_ENGINE_XRAY_BASE_URL=http://mockserver:8081/mock-xray
      - MCP_ENGINE_XRAY_USERNAME=mock-xray-user
      - MCP_ENGINE_XRAY_PASSWORD=mock-xray-password
      - MCP_ENGINE_XRAY_API_KEY=mock-xray-api-key
      - MCP_ENGINE_XRAY_WEBHOOK_SECRET=mock-xray-secret
      - MCP_ENGINE_XRAY_MOCK_RESPONSES=true
    volumes:
      - ./configs:/app/configs
    depends_on:
      - postgres
      - redis
      - mockserver
      - localstack
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "/app/scripts/health-check.sh"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - mcp-network

  mockserver:
    build:
      context: .
      dockerfile: Dockerfile.mockserver
    ports:
      - "8081:8081"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:8081/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - mcp-network

  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=mcp
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/db/init.sql:/docker-entrypoint-initdb.d/init.sql
    command: ["postgres"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - mcp-network

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - mcp-network

  prometheus:
    image: prom/prometheus:v2.44.0
    ports:
      - "9090:9090"
    volumes:
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    restart: unless-stopped
    networks:
      - mcp-network

  grafana:
    image: grafana/grafana:10.0.0
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./configs/grafana/provisioning:/etc/grafana/provisioning
      - ./configs/grafana/dashboards:/var/lib/grafana/dashboards
    restart: unless-stopped
    depends_on:
      - prometheus
    networks:
      - mcp-network

volumes:
  postgres-data:
  redis-data:
  prometheus-data:
  grafana-data:
  localstack-data:

networks:
  mcp-network:
    driver: bridge
    