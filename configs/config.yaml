# MCP Server Configuration Template

# Storage Configuration
storage:
  # Storage provider type: "local" or "s3"
  type: "s3"
  
  # S3 Storage Configuration
  s3:
    region: "${MCP_STORAGE_S3_REGION:-us-west-2}"
    bucket: "${MCP_STORAGE_S3_BUCKET:-mcp-contexts}"
    upload_part_size: 5242880  # 5MB
    download_part_size: 5242880  # 5MB
    concurrency: 5
    request_timeout: 30s
  
  # Context Storage Configuration
  context_storage:
    # Provider: "database" or "s3"
    provider: "${MCP_STORAGE_CONTEXT_STORAGE_PROVIDER:-s3}"
    s3_path_prefix: "${MCP_STORAGE_CONTEXT_STORAGE_S3_PATH_PREFIX:-contexts}"

# API Server Configuration
api:
  listen_address: ":8080"
  read_timeout: 30s
  write_timeout: 30s
  idle_timeout: 90s
  base_path: "/api/v1"
  enable_cors: true
  log_requests: true
  
  # API rate limiting
  rate_limit:
    enabled: true
    limit: 100
    burst: 150
    expiration: 1h
  
  # Webhook configuration
  webhooks:
    github:
      enabled: true
      secret: "${GITHUB_WEBHOOK_SECRET}"
      path: "/github"
    harness:
      enabled: true
      secret: "${HARNESS_WEBHOOK_SECRET}"
      path: "/harness"
    sonarqube:
      enabled: true
      secret: "${SONARQUBE_WEBHOOK_SECRET}"
      path: "/sonarqube"
    artifactory:
      enabled: true
      secret: "${ARTIFACTORY_WEBHOOK_SECRET}"
      path: "/artifactory"
    xray:
      enabled: true
      secret: "${XRAY_WEBHOOK_SECRET}"
      path: "/xray"

# Database Configuration
database:
  driver: "postgres"
  host: "postgres"
  port: 5432
  username: "postgres"
  password: "postgres"
  database: "mcp"
  ssl_mode: "disable"
  dsn: "postgres://postgres:postgres@postgres:5432/mcp?sslmode=disable"
  max_open_conns: 25
  max_idle_conns: 5
  conn_max_lifetime: 5m

# Cache Configuration
cache:
  type: "redis"
  address: "redis:6379"
  password: ""
  database: 0
  max_retries: 3
  dial_timeout: 5
  read_timeout: 3
  write_timeout: 3
  pool_size: 10
  min_idle_conns: 2
  pool_timeout: 4

# Core Engine Configuration
engine:
  event_buffer_size: 1000
  concurrency_limit: 5
  event_timeout: 30s
  
  # GitHub Configuration
  github:
    api_token: "${GITHUB_API_TOKEN}"
    webhook_secret: "${GITHUB_WEBHOOK_SECRET}"
    request_timeout: 10s
    rate_limit_per_hour: 5000
    max_retries: 3
    retry_delay: 1s
    mock_responses: ${GITHUB_MOCK_RESPONSES:-false}
    mock_url: "${GITHUB_MOCK_URL:-http://mockserver:8081/mock-github}"
  
  # Harness Configuration
  harness:
    api_token: "${HARNESS_API_TOKEN}"
    account_id: "${HARNESS_ACCOUNT_ID}"
    webhook_secret: "${HARNESS_WEBHOOK_SECRET}"
    base_url: "https://app.harness.io/gateway"
    request_timeout: 10s
    max_retries: 3
    retry_delay: 1s
  
  # SonarQube Configuration
  sonarqube:
    base_url: "${SONARQUBE_URL}"
    token: "${SONARQUBE_TOKEN}"
    webhook_secret: "${SONARQUBE_WEBHOOK_SECRET}"
    request_timeout: 10s
    max_retries: 3
    retry_delay: 1s
  
  # Artifactory Configuration
  artifactory:
    base_url: "${ARTIFACTORY_URL}"
    username: "${ARTIFACTORY_USERNAME}"
    password: "${ARTIFACTORY_PASSWORD}"
    api_key: "${ARTIFACTORY_API_KEY}"
    webhook_secret: "${ARTIFACTORY_WEBHOOK_SECRET}"
    request_timeout: 10s
    max_retries: 3
    retry_delay: 1s
  
  # Xray Configuration
  xray:
    base_url: "${XRAY_URL}"
    username: "${XRAY_USERNAME}"
    password: "${XRAY_PASSWORD}"
    api_key: "${XRAY_API_KEY}"
    webhook_secret: "${XRAY_WEBHOOK_SECRET}"
    request_timeout: 10s
    max_retries: 3
    retry_delay: 1s

# Metrics Configuration
metrics:
  enabled: true
  type: "prometheus"
  endpoint: "prometheus:9090"
  push_gateway: ""
  push_interval: 10s